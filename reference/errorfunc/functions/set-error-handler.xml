<?xml version="1.0" encoding="iso-8859-2"?>
<!-- splitted from ./ro/functions/errorfunc.xml, last change in rev 1.2 -->
<!-- last change to 'set-error-handler' in en/ tree in rev 1.1 -->
  <refentry id="function.set-error-handler">
   <refnamediv>
    <refname>set_error_handler</refname>
    <refpurpose>
     Seteazã o funcþie de tratare a erorilor definitã de utilizator
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descriere</title>
     <methodsynopsis>
      <type>string</type><methodname>set_error_handler</methodname>
      <methodparam><type>string</type><parameter>error_handler</parameter></methodparam>
     </methodsynopsis>
    <para>
     Seteazã o funcþie utilizator (<parameter>error_handler</parameter>) pentru gestionarea
     erorilor într-un script. Returneazã funcþia anterioarã de gestiune (dacã existã),
     sau &false; în cazul unei erori. Aceastã funcþie vã permite definirea propriului mod
     de tratare a erorilor la execuþie, de exemplu în aplicaþii în care
     este nevoie de refacerea unor date/fiºiere când apare o eroare criticã,
     sau este necesarã declanºarea unei erori dacã sunt îndeplinite anumite condiþii
     (folosind <function>trigger_error</function>).
    </para>
    <para>
     Funcþia definitã de utilizator trebuie sã accepte doi parametri: codul de eroare
     ºi un ºir de caractere care descrie eroarea. Începând cu versiunea PHP 4.0.2 sunt
     acceptaþi încã trei parametri opþionali: numele fiºierului în care a apãrut eroarea,
     numãrul liniei la care s-a produs aceastã eroare ºi contextul în care ea a apãrut
     (un tablou care indicã tabela de simboluri activã în punctul în care a apãrut eroarea).
    </para>
    <para>
     Mai jos este exemplificatã tratarea unei excepþii interne prin declanºarea erorilor
     ºi tratarea lor cu o funcþie definitã de utilizator:
    </para>
    <para>
     <example>
      <title>
       Tratarea erorilor cu ajutorul funcþiilor <function>set_error_handler</function> ºi
       <function>trigger_error</function>
      </title>
      <programlisting role="php">
<![CDATA[
<?php
// redefinirea constantelor de eroare - doar în PHP 4
define ('FATAL',   E_USER_ERROR);
define ('ERROR',   E_USER_WARNING);
define ('WARNING', E_USER_NOTICE);

// setarea nivelului de raportare a erorilor pentru acest script
error_reporting(FATAL | ERROR | WARNING);

// funcþia de tratare a erorilor
function myErrorHandler ($errlevel, $errstr, $errfile, $errline)
{
    switch ($errlevel) {
    case FATAL:
        echo "<b>FATAL</b> [$errlevel] $errstr<br>\n" .
            "  Eroare fatala la linia $errline in fisierul $errfile,"
            "  PHP " . PHP_VERSION . " (" . PHP_OS . ")<br>\n";
            "Abandon...<br>\n";
        exit(1);
        break;
    case ERROR:
        echo "<b>ERROR</b> [$errlevel] $errstr<br>\n";
        break;
    case WARNING:
        echo "<b>WARNING</b> [$errlevel] $errstr<br>\n";
        break;
    default:
        echo "Eroare de tip necunoscut: [$errlevel] $errstr<br>\n";
        break;
    }
}

// funcþie pentru testarea tratãrii erorilor
function scale_by_log ($vect, $scale)
{
    if (!is_numeric($scale) || $scale <= 0) {
        trigger_error("log(x) pentru x <= 0 nu este definita, ati folosit: scale = $scale", FATAL);
    }
    if (!is_array($vect)) {
        trigger_error("Tablou de intrare incorect, trebuia un tablou de valori", ERROR);
        return null;
    }
    for ($i = 0; $i < count($vect); $i++) {
        if (!is_numeric($vect[$i])) {
            trigger_error("Valoarea de la pozitia $i nu este un numar, se va folosi 0 (zero)", WARNING);
        }
        $temp[$i] = log($scale) * $vect[$i];
    }
    return $temp;
}

// setarea gestionarului de erori definit de utilizator
$old_error_handler = set_error_handler("myErrorHandler");

// se defineºte un tablou cu un element non-numeric
// ºi se declanºeazã eroare
echo "tablou a<pre>\n";
$a = array(2, 3, "foo", 5.5, 43.3, 21.11);
print_r($a);
echo "</pre>";

// se genereazã al doilea tablou ºi se declanºeazã o avertizare
echo "----<br>\ntablou b - o atentionare (b = log(PI) * a)\n<pre>";
$b = scale_by_log($a, M_PI);
print_r($b);
echo "</pre>";

// se transmite un ºir de caractere în loc de un tablou
echo "----<br>\ntablou c - eroare\n<pre>";
$c = scale_by_log("nu este tablou", 2.3);
var_dump($c);
echo "</pre>\n";

// o eroare critica: nu este definit log() pentru zero sau numere negative
echo "----<br>\ntablou d - eroare fatala\n";
$d = scale_by_log($a, -2.5);
?>
]]>
      </programlisting>
     </example>
     Rularea script-ului va produce:
     <informalexample>
      <programlisting>
<![CDATA[
tablou a
Array
(
    [0] => 2
    [1] => 3
    [2] => foo
    [3] => 5.5
    [4] => 43.3
    [5] => 21.11
)

----
tablou b - o atentionare (b = log(PI) * a) 
WARNING [1024] Valoarea de la pozitia 2 nu este un numar, se va folosi 0 (zero)
Array
(
    [0] => 2.2894597716988
    [1] => 3.4341896575482
    [2] => 0
    [3] => 6.2960143721717
    [4] => 49.566804057279
    [5] => 24.165247890281
)

----
tablou c - eroare 
ERROR [512] Tablou de intrare incorect, trebuia un tablou de valori
NULL

----
tablou d - eroare fatala FATAL [256] log(x) pentru x <= 0 nu este definita, ati folosit: scale = -2.5
Eroare fatala la linia 37 in fisierul /softure/htdocs/test.php, PHP 4.0.6 (Linux)
Abandon...
1
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Este important de reþinut cã gestionarul standard PHP al erorilor va fi ignorat
     complet. Setãrile efectuate de <function>error_reporting</function> nu vor mai avea
     nici un efect ºi va fi apelatã doar funcþia definitã de utilizator. Se poate citi în
     continuare valoarea curentã setatã de <function>error_reporting</function> pentru folosire
     adecvatã. Trebuie fãcutã menþiunea cã aceastã valoare va fi zero dacã instrucþiunea
     care a generat eroarea este precedatã de
     <link linkend="language.operators.errorcontrol">operatorul @</link> de control a erorilor.
    </para>
    <para>
     De asemenea, trebuie precizat cã este responsabilitatea programatorului sã apeleze funcþia
     <function>die</function> dacã este necesar. Dacã funcþia de tratare a erorii nu întrerupe
     explicit execuþia, scriptul va continua cu instrucþiunea urmãtoare celei care a generat eroarea.
    </para>
    <para>
     Mai consultaþi <function>error_reporting</function>,
     <function>restore_error_handler</function>,
     <function>trigger_error</function>, <function>user_error</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
