<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.43 Maintainer: simionea Status: ready -->
<!-- CREDITS: adiju -->
<refentry xml:id="function.set-error-handler" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>set_error_handler</refname>
  <refpurpose>Stabileşte o funcţie definită de utilizator pentru prelucrarea erorilor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>set_error_handler</methodname>
   <methodparam><type>callback</type><parameter>error_handler</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>error_types</parameter><initializer>E_ALL | E_STRICT</initializer></methodparam>
  </methodsynopsis>
  <para>
   Stabileşte o funcţie a utilizatorului (<parameter>error_handler</parameter>)
   pentru a prelucra erorile într-un script.
  </para>
  <para>
   Această funcţie poate fi utilizată pentru definirea propriului dumneavoastră
   mod de a prelucra erorile în timpul rulării, spre exemplu în aplicaţii în
   care este nevoie de a efectua curăţirea datelor / fişierelor atunci când
   survine o eroare critică, sau când aveţi nevoie să declanşaţi o eroare în
   anumite circumstanţe (utilizând <function>trigger_error</function>).
  </para>
  <para>
   Este important de a ţine minte că funcţia standardă de prelucrare a erorii a
   PHP este ocolită complet. Setările <function>error_reporting</function> nu
   vor avea nici un efect şi funcţia dumneavoastră de prelucrare a erorii va fi
   apelată în orice caz - însă puteţi totuşi citi valoarea curentă a
   <link linkend="ini.error-reporting">error_reporting</link> şi să acţionaţi
   corespunzător. Merită de menţionat că această valoare va fi 0 dacă
   instrucţiunea care a cauzat eroarea a fost prefixată cu
   <link linkend="language.operators.errorcontrol">operatorul de
   control al erorii @</link>.
  </para>
  <para>
   De asemenea observaţi ca este responsabilitatea dumneavoastră să efectuaţi
   <function>die</function> dacă este necesar. Dacă funcţia de prelucrare a
   erorii întoarce controlul execuţiei, execuţia scriptului continuă cu
   următoarea instrucţiune după acea care a cauzat eroarea.
  </para>
  <para>
   Următoarele tipuri de erori nu pot fi prelucrate de o funcţie definită de
   utilizator: <constant>E_ERROR</constant>, <constant>E_PARSE</constant>,
   <constant>E_CORE_ERROR</constant>, <constant>E_CORE_WARNING</constant>,
   <constant>E_COMPILE_ERROR</constant>, <constant>E_COMPILE_WARNING</constant>
   şi majoritatea <constant>E_STRICT</constant> ce survin în fişier, unde
   <function>set_error_handler</function> este apelat.
  </para>
  <para>
   Dacă erorile survin înainte de execuţia script-ului (de ex. la încărcarea
   fişierelor), funcţiile proprii de prelucrare a erorilor nu pot fi apelate,
   deoarece încă nu sunt înregistrate la acel moment.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>error_handler</parameter></term>
     <listitem>
      <para>
       Funcţia utilizatorului trebuie să accepte doi parametri: codul erorii
       şi un string ce descrie eroarea. Apoi sunt trei parametri opţionali ce
       pot fi furnizaţi: denumirea fişierului în care a survenit eroarea,
       numărul liniei în care a survenit eroarea şi contextul în care a
       survenit eroarea (un tablou ce indică spre tabelul de simboluri activ
       la momentul apariţiei erorii). Funcţia poate fi definită ca:
      </para>
      <para>
       <methodsynopsis>
        <methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>int</type><parameter>errno</parameter></methodparam>
        <methodparam><type>string</type><parameter>errstr</parameter></methodparam>
        <methodparam choice="opt"><type>string</type><parameter>errfile</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>errline</parameter></methodparam>
        <methodparam choice="opt"><type>array</type><parameter>errcontext</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>errno</parameter></term>
         <listitem>
          <simpara>
           Primul parametru, <parameter>errno</parameter>, conţine nivelul
           erorii (tip integer).
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errstr</parameter></term>
         <listitem>
          <simpara>
           Al doilea parametru, <parameter>errstr</parameter>, conţine mesajul
           de eroare (tip string).
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errfile</parameter></term>
         <listitem>
          <simpara>
           Al treilea parametru opţional, <parameter>errfile</parameter>,
           conţine denumirea fişierului în care a avut loc eroarea (tip string).
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errline</parameter></term>
         <listitem>
          <simpara>
           Al patrulea parametru opţional, <parameter>errline</parameter>,
           conţine numărul liniei unde a avut loc eroarea (tip integer).
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errcontext</parameter></term>
         <listitem>
          <simpara>
           Al cincilea parametru opţional, <parameter>errcontext</parameter>,
           este un tablou ce indică spre tabelul de simboluri activ la momentul
           când a avut loc eroarea. Cu alte cuvinte,
           <parameter>errcontext</parameter> va conţine un tablou cu toate
           variabilele ce au existat în contextul în care s-a produs eroarea.
           Funcţia de prelucrare a erorii definită de utilizator nu trebuie să
           modifice contextul erorii.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Dacă funcţia întoarce &false;, atunci funcţia normală de gestiune a
       erorii continuă.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>error_types</parameter></term>
     <listitem>
      <para>
       Poate fi utilizat pentru a masca declanşarea funcţiei
       <parameter>error_handler</parameter> în mod asemănător cum setarea ini
       <link linkend="ini.error-reporting">error_reporting</link> controlează
       care erori sunt afişate. Fără această mască stabilită
       <parameter>error_handler</parameter> va fi apelată la orice eroare,
       indiferent de setările
       <link linkend="ini.error-reporting">error_reporting</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Întoarce un string conţinând funcţia de prelucrare a erorii definită
   anterior (dacă există). Dacă se utilizează funcţia implicită de prelucrare
   a erorii, va fi întors &null;. &null; este întors de asemenea şi în cazul
   unei erori, cum ar fi o funcţie de prelucrare a erorii invalidă. Dacă
   funcţia precedentă de prelucrare a erorii era o metodă a unei clase, această
   funcţie va întoarce un tablou indexat, incluzând clasa şi denumirea metodei.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        Funcţia de prelucrare a erorii trebuie să întoarcă &false; pentru a
        popula <varname>$php_errormsg</varname>.
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        A fost introdus parametrul <parameter>error_types</parameter>.
       </entry>
      </row>
      <row>
       <entry>4.3.0</entry>
       <entry>
        În locul denumirii funcţiei, poate fi furnizat de asemenea şi un tablou
        conţinând o referinţă la un obiect şi denumirea unei metode în
        parametrul <parameter>error_handler</parameter>.
       </entry>
      </row>
      <row>
       <entry>4.0.2</entry>
       <entry>
        Au fost introduşi trei parametri opţionali pentru funcţia
        utilizatorului <parameter>error_handler</parameter>. Aceştia sunt
        denumirea fişierului, numărul liniei şi contextul.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Controlul erorilor cu <function>set_error_handler</function> şi <function>trigger_error</function></title>
    <para>
     Exemplul ce urmează demonstrează prelucrarea excepţiilor interne prin
     generarea erorilor şi prelucrarea lor cu ajutorul unei funcţii definite de
     utilizator:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Funcţia de prelucrare a erorilor
function myErrorHandler($errno, $errstr, $errfile, $errline)
{
    switch ($errno) {
    case E_USER_ERROR:
        echo "<b>My ERROR</b> [$errno] $errstr<br />\n";
        echo "  Fatal error on line $errline in file $errfile";
        echo ", PHP " . PHP_VERSION . " (" . PHP_OS . ")<br />\n";
        echo "Aborting...<br />\n";
        exit(1);
        break;

    case E_USER_WARNING:
        echo "<b>My WARNING</b> [$errno] $errstr<br />\n";
        break;

    case E_USER_NOTICE:
        echo "<b>My NOTICE</b> [$errno] $errstr<br />\n";
        break;

    default:
        echo "Unknown error type: [$errno] $errstr<br />\n";
        break;
    }

    /* Nu executa funcţia internă a PHP de prelucrare a erorii */
    return true;
}

// Funcţie pentru a verifica prelucrarea erorilor
function scale_by_log($vect, $scale)
{
    if (!is_numeric($scale) || $scale <= 0) {
        trigger_error("log(x) for x <= 0 is undefined, you used: scale = $scale", E_USER_ERROR);
    }

    if (!is_array($vect)) {
        trigger_error("Incorrect input vector, array of values expected", E_USER_WARNING);
        return null;
    }

    $temp = array();
    foreach($vect as $pos => $value) {
        if (!is_numeric($value)) {
            trigger_error("Value at position $pos is not a number, using 0 (zero)", E_USER_NOTICE);
            $value = 0;
        }
        $temp[$pos] = log($scale) * $value;
    }

    return $temp;
}

// Se stabileşte funcţia de prelucrare a erorilor definită de utilizator
$old_error_handler = set_error_handler("myErrorHandler");

// declanşăm unele erori, în primul rând definim un tablou mixt cu un element non-numeric
echo "vector a\n";
$a = array(2, 3, "foo", 5.5, 43.3, 21.11);
print_r($a);

// acum generăm următorul tablou
echo "----\nvector b - a notice (b = log(PI) * a)\n";
/* Valoarea din poziţia $pos nu este un număr, se va utiliza 0 (zero) */
$b = scale_by_log($a, M_PI);
print_r($b);

// aici este o problemă: se transmite un string în loc de un array
echo "----\nvector c - a warning\n";
/* Vector de intrare incorect, se aşteaptă un tablou de valori */
$c = scale_by_log("not array", 2.3);
var_dump($c); // NULL

// aceasta este o eroare critică, logaritmul lui zero, sau a unui număr negativ este nedefinit
echo "----\nvector d - fatal error\n";
/* log(x) pentru x <= 0 nu este definit, aţi utilizat: scale = $scale" */
$d = scale_by_log($a, -2.5);
var_dump($d); // Niciodată nu se ajunge aici
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
vector a
Array
(
    [0] => 2
    [1] => 3
    [2] => foo
    [3] => 5.5
    [4] => 43.3
    [5] => 21.11
)
----
vector b - a notice (b = log(PI) * a)
<b>My NOTICE</b> [1024] Value at position 2 is not a number, using 0 (zero)<br />
Array
(
    [0] => 2.2894597716988
    [1] => 3.4341896575482
    [2] => 0
    [3] => 6.2960143721717
    [4] => 49.566804057279
    [5] => 24.165247890281
)
----
vector c - a warning
<b>My WARNING</b> [512] Incorrect input vector, array of values expected<br />
NULL
----
vector d - fatal error
<b>My ERROR</b> [256] log(x) for x <= 0 is undefined, you used: scale = -2.5<br />
  Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)<br />
Aborting...<br />
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><classname>ErrorException</classname></member>
    <member><function>error_reporting</function></member>
    <member><function>restore_error_handler</function></member>
    <member><function>trigger_error</function></member>
    <member><link linkend="errorfunc.constants">constantele nivelelor de erori</link></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
