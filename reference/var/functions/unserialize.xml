<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.27 Maintainer: simionea Status: ready -->
<!-- CREDITS: adiju -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>
   Creează o valoare PHP dintr-o reprezentare stocată
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> preia o singură variabilă serializată şi o
   converteşte invers într-o valoare PHP.  
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       String-ul serializat.
      </para>
      <para>
       Dacă variabila ce se deserializează este un obiect, după ce se
       reconstituie cu succes, PHP automat va încerca să apeleze funcţia-membru
       <function>__wakeup</function> (dacă aceasta există).
      </para>
      <para>
       <note>
        <title>directiva unserialize_callback_func</title>
        <para>
         Este posibil de a stabili o funcţie de apel invers ce se va apela când
         o clasă nedefinită trebuie instanţiată în timpul deserializării.
         (pentru a preveni obţinerea unui <type>object</type> incomplet
         "__PHP_Incomplete_Class".) Utilizaţi &php.ini;,
         <function>ini_set</function> sau &htaccess; pentru a defini
         '<literal>unserialize_callback_func</literal>'. De fiecare dată când o clasă nedefinită
         va trebui instanţiată, această funcţie va fi apelată. Pentru a
         dezactiva această facilitate lăsaţi această opţiune vidă.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Valoarea convertită este întoarsă, şi poate fi de tip <type>boolean</type>,
   <type>integer</type>, <type>float</type>, <type>string</type>,
   <type>array</type> sau <type>object</type>.
  </para>
  <para>
   În caz că string-ul furnizat nu poate fi deserializat se va întoarce &false;
   şi se va emite o eroare <constant>E_NOTICE</constant>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.2.0</entry>
       <entry>
        Directiva unserialize_callback_func a devenit disponibilă.
       </entry>
      </row>
      <row>
       <entry>4.0.0</entry>
       <entry>
        La serializarea unui obiect metodele nu mai sunt pierdute. 
        Vă rugăm să accesaţi
        <link linkend="language.oop.serialization">Serializarea Obiectelor</link>
        pentru informaţii suplimentare.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplu <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Aici vom utiliza unserialize() pentru a încărca datele sesiunii în tabloul
// $session_data din string-ul selectat dintr-o bază de date.
// Acest exemplu îl complementează pe cel descris în funcţia serialize().

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // dacă execute sau fetch eşuează, se iniţializează un tablou vid
    $session_data = array();
} else {
    // acum trebuie să avem datele serializate în $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // ceva nu este în regulă, iniţializează într-un tablou vid
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplu unserialize_callback_func</title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// directiva unserialize_callback_func este disponibilă începând cu PHP 4.2.0
ini_set('unserialize_callback_func', 'mycallback'); // stabileşte funcţia de apel invers

function mycallback($classname) 
{
    // doar includeţi un fişier ce conţine definiţia clasei
    // veţi lăsa ca $classname să-şi dea seama care definiţie a clasei este necesară
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; este întors atât în cazul unei erori, cât şi în cazul deserializării
    unei valori &false; serializate. Este posibil de a intercepta acest caz
    special comparând <parameter>str</parameter> cu
    <literal>serialize(false)</literal> sau interceptând eroarea
    <constant>E_NOTICE</constant> emisă.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Autoîncărcarea obiectelor</link></member>
    <member><link linkend="unserialize-callback-func">unserialize_callback_func</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
