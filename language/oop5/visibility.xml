<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.15 Maintainer: radical Status: translated -->
<!-- CREDITS: simionea -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Vizibilitatea</title>
  <para>
   Vizibilitatea unei propietăţi sau a unei metode 
   poate fi definită prefixând declaraţia cu unul din cuvintele 
   cheie: public, protected sau private. Elementele (fie ele 
   propietăţi sau metode) declarate public pot fi accesate oriunde.
   Elementele declarate protected limitează accesul la clasele 
   care moştenesc proprietăţile sau metodele (precum şi la clasa 
   care le defineşte). În final, cele declarate private limitează
   vizibilitatea doar la clasa în care sunt definite.
  </para>
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Vizibilitatea membrilor</title>
   <para>
   Membri unei clase trebuie definiţi cu: public, private, sau protected.
   </para>
   <para>
    <example>
     <title>Declaraţie membri</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Definire ClassaMea
 */
class ClassaMea
{
    public $membru_public = 'Eu sunt: Public';
    protected $membru_protected = 'Eu sunt: Protected';
    private $membru_private = 'Eu sunt: Private';

    function afiseazaBunaZiua()
    {
        echo $this->membru_public . ", ";
        echo $this->membru_protected . ", ";
        echo $this->membru_private;
    }
}

$obj = new ClassaMea();
echo $obj->membru_public;    // Funcţionează
echo $obj->membru_protected; // Eroare fatală
echo $obj->membru_private;   // Eroare fatală
$obj->afiseazaBunaZiua();    // Afişează Eu sunt: Public, Eu sunt: Protected, Eu sunt: Private

/**
 * Define ClassaMea2
 */
class ClassaMea2 extends ClassaMea
{
    // Putem redeclara metodele publice şi protected, dar nu şi pe cele private
    protected $membru_protected = 'Eu sunt: Protected2';

    function afiseazaBunaZiua()
    {
        echo $this->membru_public . ",";
        echo $this->membru_protected;
        echo $this->membru_private;
    }
}

$obj2 = new ClassaMea2();
echo $obj->membru_public;     // Funcţionează
echo $obj2->membru_private;   // Nedefinit
echo $obj2->membru_protected; // Eroare fatală
$obj2->afiseazaBunaZiua();    // Afişează Eu sunt: Public, Eu sunt: Protected2

?> 
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
     Metoda PHP 4 de a declara variabile folosind cuvântul cheie
     <emphasis>var</emphasis> este încă susţinută din motive de
     compatibilitate (fiind sinonim cuvântului cheie public).
     În PHP 5 înainte de 5.1.3, utilizarea sa va emite o avertizare de tip 
     <constant>E_STRICT</constant>.
    </simpara>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Vizibilitatea metodelor</title>
   <para>
    Metodele claselor trebuie definite cu public, private, sau protected. 
    Metodele fără nici o declaraţie sunt implicit considerate public.
   </para>
   <para>
    <example>
     <title>Declaraţie metode</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Defineşte MyClass
 */
class MyClass
{
    // Declară un constructor public
    public function __construct() { }

    // Declară o metodă publică
    public function MyPublic() { }

    // Declară o metodă protected
    protected function MyProtected() { }

    // Declară o metodă private
    private function MyPrivate() { }

    // Aceasta este public
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Funcţionează
$myclass->MyProtected(); // Eroare fatală
$myclass->MyPrivate(); // Eroare fatală
$myclass->Foo(); // Cele Public, Protected şi Private funcţionează


/**
 * Defineşte MyClass2
 */
class MyClass2 extends MyClass
{
    // Aceasta este public
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Eroare fatală
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Funcţionează
$myclass2->Foo2(); // Public şi Protected funcţionează, dar nu şi Private

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
