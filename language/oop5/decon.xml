<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
 <sect1 id="language.oop5.decon">
  <title>Constructori si Destructori</title>

  <sect2 id="language.oop5.decon.constructor">
   <title>Constructor</title>
   <methodsynopsis>
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 permite dezvoltatorilor sa defineasca constructori pentru clase.
    Clasele care au definit un constructor vor apela aceasta metoda la fiecare 
	obiect nou creat, pentru ca acesta (obiectul) sa fie utilizabil pentru 
	initializare inante de a fi folosit.
   </para>
   <note>
    <simpara>
     Constructorul parinte nu este apelat implicit. Pentru a apela un 
	 constructor parinte, trebuie sa apelati 
	 <function>parent::__construct</function> in clasa descendenta.
    </simpara>
   </note>
   <example>
    <title>folosirea metodei de definire a constructorilor</title>
    <programlisting role="php">
<![CDATA[
<?php
class ClasaDeBaza {
   function __construct() {
       print "Sunt in contructorul clasei: ClasaDeBaza\n";
   }
}

class ClasaExtinsa extends ClasaDeBaza {
   function __construct() {
       parent::__construct();
       print "Sunt in constructorul clasei: ClasaExtinsa\n";
   }
}

$obj = new ClasaDeBaza();
$obj = new ClasaExtinsa();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Pentru compatibilitate cu versiunile mai vechi, daca PHP 5 nu gaseste
	functia <function>__construct</function> penru o clasa, va cauta 
	in formatul vechi o functie care are chiar numele clasei.
    Drept urmare, singura neconcordanta in compatibilitate va fi atunci cand
	ati folosit in clase functia <function>__construct</function> pentru 
	alte scopuri decat initializarea obiectului.
   </para>
  </sect2>

  <sect2 id="language.oop5.decon.destructor">
   <title>Destructori</title>
   <methodsynopsis>
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 introduce un conceptul de distrugere a unui obiect similar cu cel 
	regasit in alte limbaje de programare orientate pe obiecte (C++). 
	Metoda de distrugere va fi chemata imediat ce toate referintele catre 
	un anumit obiect dispar sau atunci cand obiectul este distrus explicit.
   </para>
   <example>
    <title>Exemplu destructor</title>
    <programlisting role="php">
<![CDATA[
<?php
class ClassaCuDestructor {
   function __construct() {
       print "Sunt in constructor.\n";
       $this->name = "ClassaCuDestructor";
   }

   function __destruct() {
       print "Distrug " . $this->name . "\n";
   }
}

$obj = new ClassaCuDestructor();
?> 
]]>
    </programlisting>
   </example>
   <para>
    La fel ca la constructori, destructorii parinti nu vor fi chemati implicit.
    Pentru a apela destructorul parinte trebuie sa apelati explicit 
	 <function>parent::__destruct</function> in destructorul descendent.
   </para>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
