<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.12 Maintainer: radical Status: ready -->
<!-- CREDITS: simionea -->
 <sect1 xml:id="language.oop5.autoload" xmlns="http://docbook.org/ns/docbook">
  <title>Autoîncărcarea claselor</title>
  <para>
   Mulţi programatori care scriu aplicaţii orientate pe obiecte
   crează câte un fişier PHP pentru fiecare clasă pe care o definesc.
   O problemă delicată era lista mare de fişiere ce trebuiau 
   incluse la începutul fiecărui script.
  </para>
  <para>
   În PHP 5, acest lucru nu mai este necasar. Se poate defini funcţia
   __autoload care este apelată automat în cazul în care doriţi să folosiţi
   o clasă care nu a fost încă definită. Apelul la această funcţie
   oferă script-ului o ultimă şansă de a defini clasa pentru a nu 
   termina cu eroare.
  </para>
  <note>
   <para>
    Excepţiile aruncate în __autoload nu pot fi captate într-un bloc
    <link linkend="language.exceptions">catch</link> şi rezultând
    astfel eroare fatală.
   </para>
  </note>
  <note>
   <para>
    Această funcţie specială nu este disponibilă dacă folosiţi PHP în
    <link linkend="features.commandline">mod CLI interactiv</link>.
   </para>
  </note>
  <note>
   <para>
    Dacă denumirea clasei este utilizată de ex. în
    <function>call_user_func</function>, atunci ea poate conţine caractere 
    periculoase, cum ar fi <literal>../</literal>.
    Nu este recomandabil să utilizaţi datele introduse de utilizator în 
    asemenea funcţii, sau, cel puţin, să verificaţi ce s-a introdus în
    <function>__autoload</function>.
   </para>
  </note>
  <para>
   <example>
    <title>Exemplu cu autoîncărcare</title>
    <para>
     Acest exemplu încearcă să încarce clasele <literal>MyClass1</literal>
     şi <literal>MyClass2</literal> din fişierele <filename>MyClass1.php</filename>
     şi <filename>MyClass2.php</filename>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function __autoload($class_name) {
    require_once $class_name . '.php';
}

$obj  = new MyClass1();
$obj2 = new MyClass2(); 
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Un alt exemplu Autoload</title>
    <para>
     Acest exemplu încearcă să încarce interfaţa <literal>ITest</literal>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

function __autoload($name) {
    var_dump($name);
}

class Foo implements ITest {
}

/*
string(5) "ITest"

Fatal error: Interface 'ITest' not found in ...
*/
?>
]]>
    </programlisting>
   </example>
  </para>

  <simplesect role="seealso">
   &reftitle.seealso;
   <para>
    <simplelist>
     <member><function>unserialize</function></member>
     <member><link linkend="unserialize-callback-func">unserialize_callback_func</link></member>
    </simplelist>
   </para>
  </simplesect>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
